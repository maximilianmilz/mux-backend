/*
 * This file is generated by jOOQ.
 */
package de.crafted.api.service.ticket.jooq.tables;


import de.crafted.api.service.ticket.jooq.DefaultSchema;
import de.crafted.api.service.ticket.jooq.Keys;
import de.crafted.api.service.ticket.jooq.enums.Status;
import de.crafted.api.service.ticket.jooq.tables.records.TicketRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ticket extends TableImpl<TicketRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ticket</code>
     */
    public static final Ticket TICKET = new Ticket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketRecord> getRecordType() {
        return TicketRecord.class;
    }

    /**
     * The column <code>ticket.id</code>.
     */
    public final TableField<TicketRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>ticket.title</code>.
     */
    public final TableField<TicketRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>ticket.description</code>.
     */
    public final TableField<TicketRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ticket.status</code>.
     */
    public final TableField<TicketRecord, Status> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Status.class), this, "");

    /**
     * The column <code>ticket.created</code>.
     */
    public final TableField<TicketRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>ticket.account_id</code>.
     */
    public final TableField<TicketRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ticket.assigned_to</code>.
     */
    public final TableField<TicketRecord, Long> ASSIGNED_TO = createField(DSL.name("assigned_to"), SQLDataType.BIGINT, this, "");

    private Ticket(Name alias, Table<TicketRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ticket(Name alias, Table<TicketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ticket</code> table reference
     */
    public Ticket(String alias) {
        this(DSL.name(alias), TICKET);
    }

    /**
     * Create an aliased <code>ticket</code> table reference
     */
    public Ticket(Name alias) {
        this(alias, TICKET);
    }

    /**
     * Create a <code>ticket</code> table reference
     */
    public Ticket() {
        this(DSL.name("ticket"), null);
    }

    public <O extends Record> Ticket(Table<O> child, ForeignKey<O, TicketRecord> key) {
        super(child, key, TICKET);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TicketRecord, Long> getIdentity() {
        return (Identity<TicketRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TicketRecord> getPrimaryKey() {
        return Keys.TICKET_PKEY;
    }

    @Override
    public List<UniqueKey<TicketRecord>> getKeys() {
        return Arrays.<UniqueKey<TicketRecord>>asList(Keys.TICKET_PKEY);
    }

    @Override
    public Ticket as(String alias) {
        return new Ticket(DSL.name(alias), this);
    }

    @Override
    public Ticket as(Name alias) {
        return new Ticket(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(String name) {
        return new Ticket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(Name name) {
        return new Ticket(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, Status, LocalDateTime, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
