/*
 * This file is generated by jOOQ.
 */
package de.thb.craftsquad.service.ticket.jooq.tables.records;


import de.thb.craftsquad.service.ticket.jooq.tables.TicketImage;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicketImageRecord extends UpdatableRecordImpl<TicketImageRecord> implements Record2<Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ticket_image.ticket_id</code>.
     */
    public void setTicketId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>ticket_image.ticket_id</code>.
     */
    public Long getTicketId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>ticket_image.image_id</code>.
     */
    public void setImageId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>ticket_image.image_id</code>.
     */
    public Long getImageId() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TicketImage.TICKET_IMAGE.TICKET_ID;
    }

    @Override
    public Field<Long> field2() {
        return TicketImage.TICKET_IMAGE.IMAGE_ID;
    }

    @Override
    public Long component1() {
        return getTicketId();
    }

    @Override
    public Long component2() {
        return getImageId();
    }

    @Override
    public Long value1() {
        return getTicketId();
    }

    @Override
    public Long value2() {
        return getImageId();
    }

    @Override
    public TicketImageRecord value1(Long value) {
        setTicketId(value);
        return this;
    }

    @Override
    public TicketImageRecord value2(Long value) {
        setImageId(value);
        return this;
    }

    @Override
    public TicketImageRecord values(Long value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TicketImageRecord
     */
    public TicketImageRecord() {
        super(TicketImage.TICKET_IMAGE);
    }

    /**
     * Create a detached, initialised TicketImageRecord
     */
    public TicketImageRecord(Long ticketId, Long imageId) {
        super(TicketImage.TICKET_IMAGE);

        setTicketId(ticketId);
        setImageId(imageId);
    }
}
